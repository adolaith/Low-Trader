package com.ado.trader.input;

import com.ado.trader.map.Map;
import com.ado.trader.placement.PlacementManager;
import com.ado.trader.utils.IsoUtils;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.scenes.scene2d.Stage;

public class InputHandler implements InputProcessor{
	
	public static boolean DEBUG = false;
	Vector3 vec3Clicked,mousePosVec3;
	public Vector2 mapClicked;
	Vector2 isoClicked;
	Vector2 mousePosVec2;
	InputMultiplexer inputSystem;
	int velocity = 25;
	
	Stage stage;
	Map map;
	PlacementManager plManager;
	OrthographicCamera camera;

	public InputHandler(Stage stage, Map map, PlacementManager plManager, OrthographicCamera camera){
		this.stage = stage;
		this.map = map;
		this.plManager = plManager;
		this.camera = camera;
		
		vec3Clicked = new Vector3();
		isoClicked= new Vector2();
		mapClicked= new Vector2();
		mousePosVec3 = new Vector3();
		mousePosVec2 = new Vector2(0,0);
		setInputSystems(stage,this);
	}

	public boolean leftClick(int button){
		
		return false;
	}
	public boolean rightClick(int button){
		
			return true;
	}

	@Override
	public boolean keyDown(int keycode) {
		return false;
	}

	@Override
	public boolean keyUp(int keycode) {
		return false;
	}

	@Override
	public boolean keyTyped(char character) {
		return false;
	}
	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
		//converts and stores mouse coords to 2Dworld coords
		setClickedVectors(screenX, screenY);
		if(mapClicked.x < 0 || mapClicked.y < 0 || mapClicked.x > map.getWidthInTiles() || mapClicked.y > map.getHeightInTiles()){return true;}
		
		return false;
	}
	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
		setClickedVectors(screenX, screenY);
		if(mapClicked.x < 0 || mapClicked.y < 0 || mapClicked.x > map.getWidthInTiles() || mapClicked.y > map.getHeightInTiles()){return true;}
		
		stage.setKeyboardFocus(null);
		
		return false;
	}
	private void setClickedVectors(int screenX, int screenY){
		vec3Clicked.set(screenX, screenY, 0);
		camera.unproject(vec3Clicked);
		isoClicked.set(vec3Clicked.x, vec3Clicked.y);
		
		mapClicked = IsoUtils.getColRow((int)isoClicked.x, (int)isoClicked.y, map.getTileWidth(), map.getTileHeight());
	}
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		mousePosVec3.set(screenX, screenY, 0);
		camera.unproject(mousePosVec3);
		mousePosVec2.set(mousePosVec3.x, mousePosVec3.y);
		return false;
	}
	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		mousePosVec3.set(screenX, screenY, 0);
		camera.unproject(mousePosVec3);
		mousePosVec2.set(mousePosVec3.x, mousePosVec3.y);
		return false;
	}
	public boolean scrolled(int amount) {
		return false;
	}
	public void setInputSystems(InputProcessor... processors) {
		inputSystem = new InputMultiplexer(processors);
		Gdx.input.setInputProcessor(inputSystem);
	}
	public Vector2 getIsoClicked() {
		return isoClicked;
	}
	public Vector2 getMapClicked() {
		return mapClicked;
	}
	public Vector3 getVec3Clicked() {
		return vec3Clicked;
	}
	public Vector2 getMousePos() {
		return mousePosVec2;
	}
}
